<{filename name=cpgf-index }>

<{title}>cpgf library -- a free C++ open source library for reflection, serialization, script binding, callbacks <{/title}>


<h1>cpgf library -- a free C++ open source library for reflection, serialization, script binding, callbacks </h1>

<{autobr}>
cpgf is a free, open source and cross platform C++ library.
cpgf is composed by several independent components:
<{autoul}>
	cpgf reflection -- a library to add	reflection feature to C++.
	
	cpgf serialization -- a library to save C++ data and objects to persistent storage and then load back.
	
	cpgf script binding -- a script binding engine to connect Lua, Google V8 Javascript and Python to C++. It's based on the reflection library.
	
	cpgf callback -- a callback library to implement signal/slot or callback in C++. It's the primary library for other libraries.
	
	cpgf meta data collection -- a library with built-in meta data support. Now there are meta data for C++ STL, OpenGL, OpenGLU, OpenGLUT, Box2D physical engine and SFML multimedia library.
	
	cpgf meta data generator tool -- a tool written in Java to automatically generate meta data from Doxygen XML files.
<{/autoul}>
The goal of cpgf is to extend C++ language with lots of easy to use features, which are only available in other higher level languages and absent  in C++.
cpgf provides a powerful reflection and meta data system. Have you ever envied the reflection system in C# and Java? Now we have it in C++!
cpgf provides a very easy to use serialization system. Want the the same serialization system that is in C# and Java? Now we have it in C++!
cpgf makes binding Lua, Google V8 Javascript, and Python to C++ a piece of cake! The script binding engine extensively uses the reflection system.
cpgf provides a very easy to use callback system, which is commonly used in C# and script languages.
Want to use OpenGL, Box2D and SFML in Lua, Javascript and Python? It is very simple and easy using cpgf.

<b>Vesion 1.4.5 is released on Jul.28, 2012. </b>

<{/autobr}>

<h3>Key features</h3>
<{autoul}>
	<b>Provide easy to use class and function based library. </b>

	<b>Also provide interface based, Windows COM style, binary compatible API. </b> It's easy to put meta data in a dynamic library and use the meta data from within another library.

	<b>Written in standard and portable C++. </b> It can be compiled in VC 2008, GCC 3.4.2, Intel Composer XE 12.1.2 and C++ Builder 2010, on Windows, Linux, and Mac (iOS, iPhone, iPad).

	<b>Extensively, but not abuse, using template programming. </b> 
	
	<b>No need external preprocessor or code generation tools. </b> Just coding and enjoy. Easy to setup, easy to integrate with your project.
	
	<b>Free and open source. </b>
<{/autoul}>


<h3>Quick facts of reflection library</h3>
<{autoul}>
	As powerful as the reflection system in Java and C#.
	Reflect global/member functions, global/member fields (variable), global/member properties (fields with getter/setter), constructors, classes, enumerators, and annotations.
	Real runtime reflection. No compile time template parameters are needed when using the reflection.
	No external preprocessor required, no ugly macros. Only using C++ templates, classes, and functions.
	Support multiple inheritance.
	Support default parameters for constructor, method, and operators.
	For more information, please read cpgf reflection related documentation.
<{/autoul}>

<h3>Quick facts of serialization library</h3>
<{autoul}>
	As powerful as the serialization system in Java and C#.
	Serialize object graph.
	Correctly resolve multiple pointers to same object.
	Serialize polymorphic objects.
	Serialize C++ array.
	Very extensible. The library supports customized serializer to serialize special data type manually.
	Storage format agnostic.
	Versioning.
	Doesn't require extra intervention. Serialization only depends on relection meta data.
	For more information, please read cpgf serialization related documentation.
<{/autoul}>

<h3>Quick facts of script binding library</h3>
<{autoul}>
	Support Lua 5.2 and 5.1, Google V8 Javascript, and Python 2.7.3.
	Very easy and simple to use. Any reflected meta data can be bound to scripts.
	Bind C++ classes, enumerators, functions, variables and operators to Lua, Google V8 Javascript and Python.
	Invoke Lua, V8 Javascript and Python functions from C++.
	Pass function written in script to C++ and used by C++.
	Get and set Lua, V8 Javascript and Python variables from C++.
	Transfer arbitrary binary data between C++ and script.
	Pass arbitrary script function and object to C++.
	For more information, please read cpgf script binding related documentation.
<{/autoul}>

<h3>Download cpgf library</h3>
<{autobr}>
<a href="cpgf-download.html">Download the library</a>

<{/autobr}>

<h3>Documentations</h3>
<{autobr}>
<a href="cpgf-docs.html">Read the documentations</a>

<{/autobr}>

<h3>License</h3>
<{autobr}>
	Apache License, Version 2.0

<{/autobr}>

<h3>Change log</h3>
<{autobr}>
<a href="cpgf-change-log.html">Change log</a>

<{/autobr}>

<h3>Author and owner</h3>
<{autobr}>
Wang Qi, in Beijing, China
Website: <a href="http://www.kbasm.com/">http://www.kbasm.com/</a>

<{/autobr}>


<h3>Compatibility -- Tested compilers and platforms </h3>
<{autobr}>
	Support GCC 3.4.2 and up, MS VC 2008 and up, C++ Builder 2010 and up, XCode and Intel C++ Compiler.
	<a href="docs-cpgf-compilers-and-platforms.html">Read this document for more information </a>

<{/autobr}>

	
<h3>Required third party library -- None for the primary libraries </h3>
<{autobr}>
	Doesn't require C++0X, TR1 or C++11 features.
	Doesn't require Boost library.
	For Lua binding, Lua library is required.
	For Google V8 Javascript binding, V8 library is required.
	For Python binding, Python library is required.
	If you want to run the unit test, UnitTest++ is required. But usually you don't need to do that.
	
<{/autobr}>
	

<h3>Learning the library </h3>
<{autobr}>
	Though there are some documentations on this website, they are far from good.
	They are incomplete, and not quite native reading.

	The fastest way to get start with the library is to read the sample code in the folder "samples".
	The sample code was originally written for test purpose, so they are not as easy to read as you expect. But they covers most features so it's a good kick off.
	
	If you want to read more sample code, read the code in the folder "test".
	They are for unit test. They are much more difficult to read and they use a lot of macros.
	However, they cover much more functions than the sample code.
	
<{/autobr}>
	
<h3>How is the library tested </h3>
<{autobr}>
	Several measures are adopted to test the library.
	Unit test -- hundreds of unit tests were written and ran. More unit tests are being added for existing code and new code.
	Valgrind -- valgrind is used to check memory leaks and other memory problems (wild pointer, double free, etc).
	Code coverage -- GNU gcov is used to check the code coverage in unit tests. The ultimate goal is to cover all API functions and 80% implementation code. Though we didn't achieve the goal yet, we are closing to it day by day.
	
<{/autobr}>

<h3>Contribute to the library </h3>
<{autobr}>
	If you like the library and want to contribute to it, here are some most desired work to do
	1, Use the library in your real project. That will help the library much. A library is nothing without real projects using it.
	2, Help with the documentation. I'm not a native English speaker, and I also don't enjoy writing documentation.
	3, Test the library on more compilers and platforms, especially on 64 bit platforms and compilers.
	
<{/autobr}>

<h3>What does cpgf mean? </h3>
<{autobr}>
	The original cpgf means Cross Platform Game Framework.
	It was intended	to be game framework that can work on PC and smart phone.
	But later I decided to add more fun but non-game features to the library.
	So now the library is neither for game nor a framework.
	It's a cross platform C++ library.
	
<{/autobr}>


