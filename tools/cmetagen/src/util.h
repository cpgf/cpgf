#ifndef CPGF_UTIL_H
#define CPGF_UTIL_H

#include "cpgf/gflags.h"
#include "cpgf/gcallback.h"

#include <string>
#include <vector>


namespace metagen {


template <typename T>
void clearPointerContainer(T & container)
{
	for(typename T::iterator it = container.begin(); it != container.end(); ++it) {
		delete *it;
	}
}

std::string normalizeSymbolName(const std::string & symbol);

// Replace all '\' with '/'
std::string normalizeFile(const std::string & file);
std::string normalizePath(const std::string & path);

std::string makeRelativePath(const std::string & base, const std::string & path);
bool readStringFromFile(const std::string & fileName, std::string * outContent);
bool writeStringToFile(const std::string & fileName, const std::string & content);
bool shouldTargetFileBeUpdated(const std::string & sourceFileName, const std::string & targetFileName);

bool isFileAutoGenerated(const std::string & fileName);

void globFiles(const std::string & path, const std::string & pattern, const cpgf::GCallback<void (const std::string &)> & callback);

void appendFileNames(std::vector<std::string> * toFileNames, const std::string & fileNames);
void appendFileNames(std::vector<std::string> * toFileNames, const std::vector<std::string> & fileNames);


} // namespace metagen


#endif
